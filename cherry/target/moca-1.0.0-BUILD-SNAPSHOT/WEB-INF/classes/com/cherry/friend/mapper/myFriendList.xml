<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper

PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <mapper namespace="com.cherry.friend.mapper.myFriendList">

	<!-- 내 친구 목록을 출력하는 쿼리 -->	 
	 <select id="myFriendList" resultType="com.cherry.friend.domain.YamanDto">
	 	SELECT * FROM YAMAN y
		inner JOIN YFRIEND f ON f.yaman_two = y.yaman_id
		WHERE f.y_status = 1 AND f.yaman_one = #{yaman_one}
		order by yok DESC, yname ASC 
	 </select>

<!-- 전체 친구목록에서 검색을 했을시 결과를 얻어오는 쿼리문 -->	
	 <select id="searchFriendList" resultType="com.cherry.friend.domain.YamanDto">
	 	SELECT * FROM YAMAN y
		inner JOIN YFRIEND f ON f.yaman_two = y.yaman_id
		WHERE f.y_status = 1 AND f.yaman_one = #{yaman_id} AND y.yname LIKE '%'||#{yname}||'%'
		order by yok desc, yname asc 
	 </select>
	 
<!-- 내 정보를 가져오는 쿼리문 -->
	<select id="myInfo" resultType="com.cherry.friend.domain.YamanDto">
		SELECT * FROM YAMAN
		WHERE yaman_id = #{yaman_id}
	</select>
<!-- 내 정보를 수정하는 쿼리문 -->	
	<update id="updateMyInfo">
		UPDATE YAMAN 
		SET yface    = #{yface},
		yname 	     = #{yname}, 
    	yphone       = #{yphone}, 
    	ycompany     = #{ycompany},
    	yschool      = #{yschool}, 
    	yhello       = #{yhello}
		WHERE yemail = #{yemail}
	</update>
	<!-- 친구와 절교할때 사용되는 쿼리문 : 나와 친구의 관계를 끊어주는 쿼리 -->
	<delete id="breakFriend">
		DELETE FROM YFRIEND 
		WHERE yaman_one = #{yaman_one} AND yaman_two = #{yaman_two}
	</delete>
	
	<!-- 친구와 절교할때 사용되는 쿼리문 : 친구와 나의 관계를 끊어주는 쿼리 -->
	<delete id="brkFriend">
		DELETE FROM YFRIEND 
		WHERE yaman_one = #{yaman_two} AND yaman_two = #{yaman_one}
	</delete>
	
	<!-- 절교요청을 보내면 절교테이블에 요청 보낸사람과 받는사람, 절교메세지가 insert 됨.  -->
	<insert id="brkmsg">
		INSERT INTO brkmessage (brkmsgno, yaman_me, yaman_friend, msg, me_name, friend_name)
		VALUES( SEQ_BRKMSGNO.NEXTVAL ,#{yaman_one}, #{yaman_two}, #{msg}, #{me_name}, #{friend_name})
	</insert>
	
	
	<!-- 친구 추가 탭에서 친구 검색을 하는 쿼리문 (이미 친구 상태인 사람과 친구요청중인 사람을 뺀 나머지 목록)-->
	<select id="fdAddList" resultType="com.cherry.friend.domain.YamanDto">
		SELECT yaman_id, yname, yface, to_char(ybirth,'YYYY/mm/dd') ybirth
  		FROM  YAMAN
  		WHERE yaman_id 
        NOT IN(
            	SELECT yaman_one
                FROM YFRIEND
                WHERE yaman_two = #{yaman_id} 
                AND y_status = 1)
				AND yaman_id != #{yaman_id}
				
				 AND yaman_id
        NOT IN (
        		SELECT yaman_two FROM YFRIEND
				WHERE yaman_one = #{yaman_id} AND y_status = 0
        		)
				
				
			<if test="yname != null">
				AND yname LIKE '%'||#{yname}||'%'
			</if>
			<if test="yschool != null">
				AND yschool LIKE '%'||#{yschool}||'%'		
			</if>
			<if test="yphone != null">
				AND yphone LIKE '%'||#{yphone}||'%'
			</if>
			<if test="yemail != null">
				AND yemail LIKE '%'||#{yemail}||'%'
			</if>
		
	</select>
	<!-- 나에게 온 절교 메세지를 조회하는 쿼리 -->
	<select id="brkMessageSelect" resultType="com.cherry.friend.domain.YamanDto">
		SELECT * FROM BRKMESSAGE
		where readmsg = 'N' and yaman_friend = #{userId}
	</select>
	
	
	<!-- 절교 메세지를 확인하면 readmsg의 값을 'N'에서 'Y'로 바꿔주는 쿼리문 -->
	<update id="readMsgChange">
		UPDATE BRKMESSAGE
		SET readmsg='Y' 
		WHERE brkmsgno = #{brkmsgno}
	</update>
	
	<!-- 친구 검색후 친구 요청을 보내는(insert 0번)쿼리 -->
	<insert id="friendReq">
		INSERT INTO YFRIEND
		VALUES(#{yaman_one},#{yaman_two},0)
	</insert>
	
	<!-- 친구요청을 보내면 friendreq테이블에도 동시에 insert 된다. -->
	<insert id="insertReq">
		INSERT INTO FRIENDREQ (reqno, req_me, req_friend, reqme_name)
		VALUES(SEQ_REQNO.NEXTVAL , #{req_me}, #{req_friend}, #{reqme_name})
	</insert>
	
	
	<!-- 나에게 온 친구요청을 조회하는 쿼리 -->
	<select id="reqMessage" resultType="com.cherry.friend.domain.YamanDto">
		SELECT * FROM FRIENDREQ
		WHERE req_friend = #{userId} AND req_yn = 'N'
	</select>
	
	<!-- 요청보낸 친구ID와 내ID를 갖고 yfriend의 상태를 1로 바꿔준다.(update)-->
	<update id="reqUpdate">
		UPDATE yfriend
		SET y_status = 1 
		WHERE yaman_one = #{yaman_one} AND yaman_two = #{yaman_two}
	</update>
	
	<!-- 거꾸로 내ID와 친구ID를 1인 상태로 insert 해준다.(요청할때는 한쪽에서만 일방적인 요청이기때문) -->
	<insert id="reqInsert">
		INSERT INTO YFRIEND
		VALUES(#{yaman_two}, #{yaman_one}, 1)
	</insert>
	
	<!-- friendReq 테이블에 있는 요청 값(메세지)를 지운다.-->
	<delete id="deleteFdReq">
		DELETE FROM FRIENDREQ
		WHERE req_friend = #{yaman_two} and req_me = #{yaman_one}
	</delete>
	
	<!-- 요청을 보낸 친구ID와 내ID를 갖고 yfriend의 상태 0을 삭제한다.(delete) -->
	<delete id="deleteYfriend">
		DELETE FROM YFRIEND
		WHERE yaman_one = #{yaman_one}  AND yaman_two = #{yaman_two} AND y_status = 0 
	</delete>
	
	<!-- 접속중 로그인한 친구의 목록을 setInterval을 사용하여 계속 업데이트 해주기위한 친구 목록 -->
	<select id="fdListRefresh" resultType="com.cherry.friend.domain.YamanDto">
		SELECT * FROM YAMAN y
		inner JOIN YFRIEND f ON f.yaman_two = y.yaman_id
		WHERE f.y_status = 1 AND f.yaman_one = #{yaman_one}
		order by yok DESC, yname ASC 
	</select>
	
	<!-- 내 사진을 업데이트 하는 쿼리문 -->
	<update id="updateYface">
		UPDATE YAMAN
		SET yface = #{yface}
		WHERE yaman_id = #{yaman_id}
	</update>
	

</mapper>
